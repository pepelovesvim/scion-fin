"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Graph = void 0;
const DEFAULT_NODE = 'https://api.thegraph.com';
const DEFAULT_API_KEY = '492a6bdebf2293f9c0f2946fbb515691';
const URL_REGEX = /^https?:\/\//;
class Graph {
    constructor({ http, apiKey = DEFAULT_API_KEY }) {
        this.http = http;
        this.apiKey = apiKey;
    }
    async query(subgraph, query, variables) {
        const variablesIsLegacy = (variables === null || variables === void 0 ? void 0 : variables.variables) || (variables === null || variables === void 0 ? void 0 : variables.node);
        const options = {
            subgraph: (typeof subgraph === 'string' && !URL_REGEX.test(subgraph) ? subgraph : ''),
            url: (typeof subgraph === 'string' && URL_REGEX.test(subgraph) ? subgraph : ''),
            query: query || '',
            variables: variablesIsLegacy ? {} : variables,
            ...(variablesIsLegacy ? variables : null),
            ...(typeof subgraph !== 'string' ? subgraph : null),
        };
        if (!options.subgraph && !options.subgraphId && !options.url) {
            throw new Error(`Must set a subgraph, subgraphId or URL`);
        }
        const node = options.node || DEFAULT_NODE;
        let url = options.url;
        if (options.subgraphId) {
            if (options.subgraphId.indexOf('Qm') === 0) {
                // Hosted subgraph
                url = `${node}/subgraphs/id/${options.subgraphId}`;
            }
            else {
                url = `https://gateway.thegraph.com/api/${this.apiKey}/subgraphs/id/${options.subgraphId}`;
            }
        }
        else if (options.subgraph) {
            url = `${node}/subgraphs/name/${options.subgraph}`;
        }
        const response = await this.http.post(url, {
            query: options.query,
            variables: options.variables || {},
            operationName: options.operationName || null,
        });
        if (response.errors) {
            const name = options.url || options.subgraphId || options.subgraph;
            throw new Error(`Error querying ${name}: ${response.errors.message || response.errors[0].message}`);
        }
        return response.data;
    }
}
exports.Graph = Graph;
