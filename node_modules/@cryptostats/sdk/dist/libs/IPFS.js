"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPFS = void 0;
require("isomorphic-fetch");
class IPFS {
    constructor({ gateway = 'https://cryptostats.infura-ipfs.io', } = {}) {
        this.gateway = gateway;
    }
    async getFile(cid) {
        const res = await fetch(`${this.gateway}/ipfs/${cid}`);
        if (res.status !== 200) {
            throw new Error(`No files found for CID ${cid}`);
        }
        const text = await res.text();
        return text;
    }
    async getDataURI(cid, mimeType) {
        const res = await fetch(`${this.gateway}/ipfs/${cid}`);
        if (res.status !== 200) {
            throw new Error(`No files found for CID ${cid}`);
        }
        const data = await res.arrayBuffer();
        const base64 = Buffer.from(data).toString('base64');
        return `data:${mimeType};base64,${base64}`;
    }
    getDataURILoader(cid, mimeType) {
        const fn = () => this.getDataURI(cid, mimeType);
        return Object.assign(fn, { cid: cid.toString(), mimeType });
    }
}
exports.IPFS = IPFS;
