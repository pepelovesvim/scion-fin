import { ICache } from './types';
export declare type QueryFn<Output = any, Input extends unknown[] = any[]> = (...params: Input) => Promise<Output>;
export declare type CacheKeyResolver<Params extends unknown[] = any[]> = (id: string, query: string, ...params: Params) => string | null | undefined;
interface AdapterProps {
    metadata: any;
    cache?: ICache | null;
    bundle?: string | null;
    cacheKeyResolver?: CacheKeyResolver | null;
}
export declare class Adapter {
    readonly id: string;
    private metadata;
    readonly bundle: string | null;
    queries: {
        [name: string]: (...params: any[]) => Promise<number>;
    };
    private cache;
    private cacheKeyResolver;
    constructor(id: string, { metadata, cache, bundle, cacheKeyResolver }: AdapterProps);
    addQuery(type: string, query: QueryFn): void;
    query<Output = any>(type: string, ...input: any[]): Promise<Output | null>;
    executeQuery<Output = any>(type: string, ...params: any[]): Promise<Output>;
    getRawMetadata(): {
        [key: string]: any;
    };
    getMetadata(): Promise<{
        [x: string]: any;
    }>;
    setCacheKeyResolver(newResolver: CacheKeyResolver): void;
}
export {};
