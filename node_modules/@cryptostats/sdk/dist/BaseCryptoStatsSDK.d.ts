import { ChainData } from './libs/ChainData';
import { CoinGecko } from './libs/CoinGecko';
import { DateLib } from './libs/DateLib';
import { Ethers } from './libs/Ethers';
import { IPFS } from './libs/IPFS';
import { Graph } from './libs/Graph';
import { HTTP } from './libs/HTTP';
import { Log, LOG_LEVEL } from './libs/Log';
import { Plugins } from './libs/Plugins';
import { Context } from './Context';
import { Collection } from './Collection';
import { ICache } from './types';
import { Etherscan } from './libs/Etherscan';
export interface CryptoStatsOptions {
    ipfsGateway?: string;
    cache?: ICache;
    infuraKey?: string;
    moralisKey?: string;
    etherscanKey?: string;
    mongoConnectionString?: string;
    redisConnectionString?: string;
    executionTimeout?: number;
    vm?: any;
    adapterListSubgraph?: string;
    onLog?: (level: LOG_LEVEL, ...args: any[]) => void;
}
export declare abstract class BaseCryptoStatsSDK {
    cache: ICache;
    readonly coinGecko: CoinGecko;
    readonly chainData: ChainData;
    readonly date: DateLib;
    readonly ethers: Ethers;
    readonly graph: Graph;
    readonly http: HTTP;
    readonly ipfs: IPFS;
    readonly etherscan: Etherscan;
    readonly log: Log;
    readonly plugins: Plugins;
    readonly vm: any;
    readonly adapterListSubgraph: string;
    readonly executionTimeout: number;
    private collections;
    constructor({ ipfsGateway, cache, infuraKey, moralisKey, etherscanKey, mongoConnectionString, redisConnectionString, executionTimeout, adapterListSubgraph, vm, onLog, }?: CryptoStatsOptions);
    protected abstract setupCache(params: {
        mongoConnectionString?: string;
        redisConnectionString?: string;
    }): void;
    getCollection(name: string): Collection;
    /**
     * @deprecated Use getCollection instead
     */
    getList(name: string): Collection;
    getContext(collection: Collection): Context;
}
