"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metadata = void 0;
const clean_1 = require("./utils/clean");
class Metadata {
    constructor(metadata) {
        this.metadata = metadata;
    }
    getRawMetadata() {
        return this.metadata;
    }
    async getMetadata() {
        const metadata = { ...this.metadata };
        await Promise.all(Object.entries(metadata).map(async ([key, val]) => {
            if (val === null || val === void 0 ? void 0 : val.then) {
                metadata[key] = clean_1.clean(await val);
            }
            else if (typeof (val) === 'function') {
                const promiseOrResult = val();
                this.metadata[key] = promiseOrResult;
                metadata[key] = clean_1.clean(await promiseOrResult);
            }
            else {
                // Since adapters generate objects in an isolated context, some serializers such
                // as Next.js don't recognize these objects as plain objects. The 'clean'
                // function will recreate fresh objects in the main context.
                metadata[key] = clean_1.clean(metadata[key]);
            }
        }));
        return metadata;
    }
}
exports.Metadata = Metadata;
