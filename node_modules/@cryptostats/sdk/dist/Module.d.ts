/// <reference types="node" />
import nodeVm from 'vm';
import { Context } from './Context';
import { SetupFn } from './types';
interface ModuleProps {
    code?: string;
    setupFn?: SetupFn;
    context: Context;
    name?: string;
    version?: string;
    license?: string;
    description?: string;
    changeLog?: string;
    sourceFile?: string;
    previousVersion?: string;
    executionTimeout?: number;
    vm?: any;
}
export declare class Module {
    name: string | null;
    version: string | null;
    license: string | null;
    description: string | null;
    changeLog: string | null;
    sourceFile: string | null;
    previousVersion: string | null;
    signer: string | null;
    signature: string | null;
    vm: typeof nodeVm | null;
    code: string | null;
    setupFn: SetupFn | null;
    private context;
    private executionTimeout;
    private cleanableScripts;
    constructor({ code, setupFn, context, name, version, license, description, changeLog, sourceFile, previousVersion, vm, executionTimeout }: ModuleProps);
    evaluate(): void;
    setup(): void;
    cleanup(): void;
}
export {};
