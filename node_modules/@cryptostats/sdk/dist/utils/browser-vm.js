"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContext = exports.Script = void 0;
const defineProp = (function () {
    try {
        Object.defineProperty({}, '_', {});
        return function (obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            });
        };
    }
    catch (e) {
        return function (obj, name, value) {
            obj[name] = value;
        };
    }
}());
const globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
    'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
    'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
    'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
    'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];
class Script {
    constructor(code) {
        this.iframe = null;
        this.code = code;
    }
    runInContext(context) {
        const iframe = document.createElement('iframe');
        if (!iframe.style) {
            // @ts-ignore
            iframe.style = {};
        }
        iframe.style.display = 'none';
        document.body.appendChild(iframe);
        const win = iframe.contentWindow;
        let wEval = win.eval;
        const wExecScript = win.execScript;
        if (!wEval && wExecScript) {
            // win.eval() magically appears when this is called in IE:
            wExecScript.call(win, 'null');
            wEval = win.eval;
        }
        Object.keys(context).forEach((key) => {
            win[key] = context[key];
        });
        globals.forEach((key) => {
            if (context[key]) {
                win[key] = context[key];
            }
        });
        var winKeys = Object.keys(win);
        var res = wEval.call(win, this.code);
        Object.keys(win).forEach((key) => {
            // Avoid copying circular objects like `top` and `window` by only
            // updating existing context properties or new properties in the `win`
            // that was only introduced after the eval.
            if (key in context || winKeys.indexOf(key) === -1) {
                context[key] = win[key];
            }
        });
        globals.forEach((key) => {
            if (!(key in context)) {
                defineProp(context, key, win[key]);
            }
        });
        // document.body.removeChild(iframe);
        this.iframe = iframe;
        return res;
    }
    cleanup() {
        if (this.iframe) {
            document.body.removeChild(this.iframe);
            this.iframe = null;
        }
    }
}
exports.Script = Script;
function createContext(context) {
    const copy = {};
    copy.prototype = {};
    Object.keys(context).forEach((key) => {
        copy[key] = context[key];
    });
    return copy;
}
exports.createContext = createContext;
;
